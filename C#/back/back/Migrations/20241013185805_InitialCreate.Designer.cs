// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back.Models;

#nullable disable

namespace back.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241013185805_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("back.Models.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenom")
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("back.Models.Candidat", b =>
                {
                    b.Property<string>("IdCandidat")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdresseParents")
                        .HasColumnType("longtext");

                    b.Property<string>("CentreBacc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CentreUniversitaire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateDelivreCin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LieuDelivreCin")
                        .HasColumnType("longtext");

                    b.Property<string>("LieuNaissance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MentionBacc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("MoyenneBacc")
                        .HasColumnType("float");

                    b.Property<int>("Nationalite")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomMere")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomPere")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroBacc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroCin")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroRecu")
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionMere")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionPere")
                        .HasColumnType("longtext");

                    b.Property<int?>("SerieBacc")
                        .HasColumnType("int");

                    b.Property<int>("SessionBacc")
                        .HasColumnType("int");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<string>("SituationMatrimoniale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeBacc")
                        .HasColumnType("int");

                    b.Property<string>("UrlActeNaissance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlBordereau")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlPhotoIdentite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("id_niveau")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("id_parcours")
                        .HasColumnType("int");

                    b.HasKey("IdCandidat");

                    b.HasIndex("id_niveau");

                    b.HasIndex("id_parcours");

                    b.ToTable("Candidat");
                });

            modelBuilder.Entity("back.Models.Etudiant", b =>
                {
                    b.Property<string>("matricule")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UrlPhotoIdentite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("id_niveau")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("id_parcours")
                        .HasColumnType("int");

                    b.Property<string>("resultat")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("sexe")
                        .HasColumnType("int");

                    b.Property<int>("statut")
                        .HasColumnType("int");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("matricule");

                    b.HasIndex("id_niveau");

                    b.HasIndex("id_parcours");

                    b.ToTable("Etudiant");
                });

            modelBuilder.Entity("back.Models.Inscription", b =>
                {
                    b.Property<string>("matricule")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdPre_Inscription")
                        .HasColumnType("int");

                    b.HasKey("matricule");

                    b.HasIndex("IdPre_Inscription")
                        .IsUnique();

                    b.ToTable("Inscription");
                });

            modelBuilder.Entity("back.Models.Mention", b =>
                {
                    b.Property<int>("id_mention")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DernierIdCandidat")
                        .HasColumnType("int");

                    b.Property<int>("DernierMatricule")
                        .HasColumnType("int");

                    b.Property<string>("code_mention")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nom_mention")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_mention");

                    b.ToTable("Mention");
                });

            modelBuilder.Entity("back.Models.Niveau", b =>
                {
                    b.Property<string>("id_niveau")
                        .HasColumnType("varchar(255)");

                    b.HasKey("id_niveau");

                    b.ToTable("Niveau");
                });

            modelBuilder.Entity("back.Models.Niveau_Parcours", b =>
                {
                    b.Property<string>("id_niveau")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<int>("id_parcours")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("status_selection")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id_niveau", "id_parcours");

                    b.HasIndex("id_parcours");

                    b.ToTable("Niveau_Parcours");
                });

            modelBuilder.Entity("back.Models.Parcours", b =>
                {
                    b.Property<int>("id_parcours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("code_parcours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("id_mention")
                        .HasColumnType("int");

                    b.Property<string>("nom_parcours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_parcours");

                    b.HasIndex("id_mention");

                    b.ToTable("Parcours");
                });

            modelBuilder.Entity("back.Models.Piece_A_Fournir", b =>
                {
                    b.Property<int>("IdPiece_A_Fournir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnneeAcademique")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Nationalite")
                        .HasColumnType("int");

                    b.Property<string>("Niveau")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroRecuDroit")
                        .HasColumnType("longtext");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlBordereau")
                        .HasColumnType("longtext");

                    b.Property<string>("UrlCertificatResidence")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlCharte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlCin")
                        .HasColumnType("longtext");

                    b.Property<string>("UrlLivret")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlPhotoIdentite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlReglement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdPiece_A_Fournir");

                    b.ToTable("Piece_A_Fournir");
                });

            modelBuilder.Entity("back.Models.Piece_Candidature", b =>
                {
                    b.Property<int>("IdFichier_Candidature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("IdCandidat")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UrlValeur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdFichier_Candidature");

                    b.HasIndex("IdCandidat");

                    b.ToTable("Piece_Candidature");
                });

            modelBuilder.Entity("back.Models.Pre_Inscription", b =>
                {
                    b.Property<int>("IdPre_Inscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IdCandidat")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdPiece_A_Fournir")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .HasColumnType("longtext");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<string>("UrlDiplomeBacc")
                        .HasColumnType("longtext");

                    b.Property<string>("UrlReleveBacc")
                        .HasColumnType("longtext");

                    b.HasKey("IdPre_Inscription");

                    b.HasIndex("IdCandidat")
                        .IsUnique();

                    b.HasIndex("IdPiece_A_Fournir")
                        .IsUnique();

                    b.ToTable("Pre_Inscription");
                });

            modelBuilder.Entity("back.Models.Pre_Selection", b =>
                {
                    b.Property<string>("IdCandidat")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCandidat");

                    b.ToTable("Pre_Selection");
                });

            modelBuilder.Entity("back.Models.Re_Inscription", b =>
                {
                    b.Property<int>("IdRe_Inscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPiece_A_Fournir")
                        .HasColumnType("int");

                    b.Property<string>("matricule")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdRe_Inscription");

                    b.HasIndex("IdPiece_A_Fournir")
                        .IsUnique();

                    b.HasIndex("matricule");

                    b.ToTable("Re_Inscription");
                });

            modelBuilder.Entity("back.Models.Candidat", b =>
                {
                    b.HasOne("back.Models.Niveau", "Niveaux")
                        .WithMany("Candidats")
                        .HasForeignKey("id_niveau")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Parcours", "Parcours")
                        .WithMany("Candidats")
                        .HasForeignKey("id_parcours")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveaux");

                    b.Navigation("Parcours");
                });

            modelBuilder.Entity("back.Models.Etudiant", b =>
                {
                    b.HasOne("back.Models.Niveau", "Niveaux")
                        .WithMany("Etudiants")
                        .HasForeignKey("id_niveau")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Parcours", "Parcours")
                        .WithMany("Etudiants")
                        .HasForeignKey("id_parcours")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Inscription", "Inscriptions")
                        .WithOne("Etudiants")
                        .HasForeignKey("back.Models.Etudiant", "matricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscriptions");

                    b.Navigation("Niveaux");

                    b.Navigation("Parcours");
                });

            modelBuilder.Entity("back.Models.Inscription", b =>
                {
                    b.HasOne("back.Models.Pre_Inscription", "Pre_Inscription")
                        .WithOne("Inscriptions")
                        .HasForeignKey("back.Models.Inscription", "IdPre_Inscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pre_Inscription");
                });

            modelBuilder.Entity("back.Models.Niveau_Parcours", b =>
                {
                    b.HasOne("back.Models.Niveau", "Niveaux")
                        .WithMany("Niveau_Parcours")
                        .HasForeignKey("id_niveau")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Parcours", "Parcours")
                        .WithMany("Niveau_Parcours")
                        .HasForeignKey("id_parcours")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveaux");

                    b.Navigation("Parcours");
                });

            modelBuilder.Entity("back.Models.Parcours", b =>
                {
                    b.HasOne("back.Models.Mention", "Mentions")
                        .WithMany("Parcours")
                        .HasForeignKey("id_mention")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentions");
                });

            modelBuilder.Entity("back.Models.Piece_Candidature", b =>
                {
                    b.HasOne("back.Models.Candidat", "Candidats")
                        .WithMany("Piece_Candidatures")
                        .HasForeignKey("IdCandidat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidats");
                });

            modelBuilder.Entity("back.Models.Pre_Inscription", b =>
                {
                    b.HasOne("back.Models.Pre_Selection", "Pre_Selections")
                        .WithOne("Pre_Inscriptions")
                        .HasForeignKey("back.Models.Pre_Inscription", "IdCandidat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Piece_A_Fournir", "Piece_A_Fournirs")
                        .WithOne("Pre_Inscriptions")
                        .HasForeignKey("back.Models.Pre_Inscription", "IdPiece_A_Fournir")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Piece_A_Fournirs");

                    b.Navigation("Pre_Selections");
                });

            modelBuilder.Entity("back.Models.Pre_Selection", b =>
                {
                    b.HasOne("back.Models.Candidat", "Candidats")
                        .WithOne("Pre_Selections")
                        .HasForeignKey("back.Models.Pre_Selection", "IdCandidat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidats");
                });

            modelBuilder.Entity("back.Models.Re_Inscription", b =>
                {
                    b.HasOne("back.Models.Piece_A_Fournir", "Piece_A_Fournirs")
                        .WithOne("Re_Inscriptions")
                        .HasForeignKey("back.Models.Re_Inscription", "IdPiece_A_Fournir")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back.Models.Etudiant", "Etudiants")
                        .WithMany("Re_Inscriptions")
                        .HasForeignKey("matricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etudiants");

                    b.Navigation("Piece_A_Fournirs");
                });

            modelBuilder.Entity("back.Models.Candidat", b =>
                {
                    b.Navigation("Piece_Candidatures");

                    b.Navigation("Pre_Selections");
                });

            modelBuilder.Entity("back.Models.Etudiant", b =>
                {
                    b.Navigation("Re_Inscriptions");
                });

            modelBuilder.Entity("back.Models.Inscription", b =>
                {
                    b.Navigation("Etudiants");
                });

            modelBuilder.Entity("back.Models.Mention", b =>
                {
                    b.Navigation("Parcours");
                });

            modelBuilder.Entity("back.Models.Niveau", b =>
                {
                    b.Navigation("Candidats");

                    b.Navigation("Etudiants");

                    b.Navigation("Niveau_Parcours");
                });

            modelBuilder.Entity("back.Models.Parcours", b =>
                {
                    b.Navigation("Candidats");

                    b.Navigation("Etudiants");

                    b.Navigation("Niveau_Parcours");
                });

            modelBuilder.Entity("back.Models.Piece_A_Fournir", b =>
                {
                    b.Navigation("Pre_Inscriptions");

                    b.Navigation("Re_Inscriptions");
                });

            modelBuilder.Entity("back.Models.Pre_Inscription", b =>
                {
                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("back.Models.Pre_Selection", b =>
                {
                    b.Navigation("Pre_Inscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
